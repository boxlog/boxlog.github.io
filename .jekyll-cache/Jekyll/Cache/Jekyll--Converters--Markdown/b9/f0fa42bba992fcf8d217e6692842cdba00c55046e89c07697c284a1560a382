I"`"<p>JPA를 사용하기로 마음먹었다면 가장 먼저 알아야 할 것이 영속성 컨텍스트 라고 생각합니다.</p>

<p>영어로 번역하면 Persistence Context 입니다.</p>

<p>먼저 영속성 컨텍스트를 이해하기 위해서는 JPA의 EntityManagerFactory와 EntityManager 를 알아야합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">EntityManagerFactory</span> <span class="n">emf</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="err">"</span><span class="n">name</span><span class="o">);</span>

<span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
</code></pre></div></div>

<p><img src="/img/posts/jpa01.jpg" width="80%" align="center" /></p>

<hr />

<p><img src="/img/posts/jpa02.jpg" width="80%" align="center" /></p>

<p>사실 영속성 컨텍스트 같은 경우 논리적인 개념으로 실제 사용자가 볼 수 있는 것은 아닙니다.</p>

<p>즉 영속성 컨텍스트를 사용하기 위해선 그림에서 볼 수 있듯이 EntityManger를 사용해야합니다.</p>

<p>이 EntityMagager를 통해서 영속성 컨텍스트에 접근할 수 있게 됩니다.</p>

<p>하지만 EntityManger 도 자신의 인스턴스를 관리해줄 곳이 필요한데 그런 공간을 만들어 주는 곳이 EntityManagerFactory 입니다.</p>

<p>EntityMangerFactory 생성 시 커넥션 풀도 만들어 줍니다.</p>

<p>그리고 Factory같은 경우는 한번 생성하는데 비용이 많이 들기 때문에 한번 생성 후 애플리케이션 전체에 공유됩니다.</p>

<p>이러한 Entity의 생명 주기에는 4가지가 있는데 차례대로 <strong>비영속 / 영속 / 준영속 / 삭제</strong> 가 있습니다.</p>

<p>위에서 가장 애매한 부분이 준영속 부분인데 이 부분은 이론적인 설명만으로는 이해하기 힘든 부분이 있어 나중에 예제 코드로 설명하겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span> <span class="nd">@Setter</span> <span class="c1">// Lombok Getter / Setter 자동 생성</span>
<span class="kd">class</span> <span class="nf">Member</span><span class="o">(){</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span> 
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>

<span class="o">...</span>

<span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
<span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
<span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"kim"</span><span class="o">);</span>
</code></pre></div></div>

<p>JPA는 클래스에서 DB로 자동 변환을 해주지만 PK는 사용자가 설정해줘야합니다.</p>

<p>간단하게 PK로 사용할 필드위에 Id 애노테이션을 사용하면 됩니다.</p>

<p>그 후 멤버 다른 곳에서 Member 객체를 생성한 코드입니다.</p>

<p>이 때 단순 객체를 생성한 상태를 <strong>비영속</strong> 이라고 합니다.</p>

<p>여기서 코드를 하나 추가합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
<span class="n">em</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">begin</span><span class="o">();</span>

<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</code></pre></div></div>

<p>첫째 줄은 단순히 EntityManger를 Factory로부터 생성,
둘째 줄은 트랜잭션 작업을 시작한다는 뜻입니다.</p>

<p>여기서 가장 중요한 것은 <strong>트랜잭션</strong> 입니다</p>

<p>JPA는 트랜잭션이라는 작업 단위를 통해서 동기화가 되기 때문에 실제로 트랜잭션을 작업 단위를 지정해주지않으면 에러가 발생 할 수 있습니다.</p>

<p>이제 em.persist를 통해서 member 객체를 넣어줍니다.
em.persist가 쿼리문으로 따지면 DB에 저장하는 INSERT 문과 비슷합니다.</p>

<p>제가 왜 비슷하다고 했냐면 em.persist가 이루어진 시점에서 member 객체를 바로 DB에 저장하는 게 아니라 위에서 언급드렸던 <strong>영속성 컨텍스트</strong> 의 관리 대상이 되는 것입니다.</p>

<p>그 후 밑의 commit() 코드를 만나게 되면 영속성 컨텍스트가 DB로 직접 쿼리문을 보내줍니다.</p>

<h2 id="즉-persist-자체는-객체를-직접적으로-db에-넣지않습니다">즉 persist 자체는 객체를 직접적으로 DB에 넣지않습니다</h2>

<p>정리하면 DB와 JPA 사이에 중간 다리가 하나 놓여있다고 머릿속으로 그림을 그려보시면 됩니다.</p>

<p>그럼 의문이 하나 생깁니다</p>

<h3 id="귀찮게-중간다리는-왜-놓는거야">귀찮게 중간다리는 왜 놓는거야?</h3>

<p>사실 데이터를 DB로 보내지 않고 영속성 컨텍스트에서 1차적으로 관리하는 행위는 여러가지 이점이 있습니다만..</p>

<p>가장 대표적인 것은 ‘변경 감지’라는 것입니다.</p>

<p>JPA로 데이터를 수정하려면 다음 코드를 보시면 됩니다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">1L</span><span class="o">);</span> <span class="c1">// 조회</span>
<span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"park"</span><span class="o">);</span>

<span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member1</span><span class="o">)</span> <span class="c1">// ???</span>

<span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</code></pre></div></div>

<p>여기서 보시면 단순히 member1 객체를 id값을 통해 찾은 다음 해당 이름을 “kim” 에서 “park”으로 변경하고자 합니다.</p>

<p>그럼 park으로 이름을 바꿨는데 다시 그 객체를 persist 해줘야하지 않을까? 이런 의문이 드는데 결론은</p>

<h2 id="안해도-됩니다"><strong>안해도 됩니다</strong></h2>

<p><img src="/img/posts/jpa03.jpg" width="80%" align="center" /></p>

<p>위 이미지를 보시면 EntityManger 내부에 1차 캐시라는 공간이 있습니다.</p>

<p>1차 캐시 내부 공간에서 만약 사용자가 em.persist를 하면 스냅샷으로 해당 객체를 저장해둡니다.</p>

<p>그 후</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="err">'</span><span class="n">park</span><span class="err">'</span><span class="o">)</span>
</code></pre></div></div>
<p>와 같은 코드로 setter를 호출해서 데이터를 바꿀 때 기존에 있던 스냅 샷과 바꾼 Member 객체 간 데이터를 비교해서 다르다면 Update 쿼리문을 자동으로 날려줍니다.</p>

<p>flush()라는 명령어가 있는데 flush가 발생하면 변경을 감지하고 수정된 엔티티를 쓰기 지연 SQL 저장소에 넣거나 해당 저장소에 있는 SQL 문을 DB로 쏴주는 역할을 합니다.</p>

:ET